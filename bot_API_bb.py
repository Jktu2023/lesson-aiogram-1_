import asyncio
import requests
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN_BOT = os.getenv("TOKEN_BOT")
if not TOKEN_BOT:
    raise ValueError("TOKEN_BOT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∫–ª—é—á–∏ Bybit (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")

# –ë–∞–∑–æ–≤—ã–π URL Bybit (USDT Perpetual)
BYBIT_BASE_URL = "https://api.bybit.com"

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot = Bot(token=TOKEN_BOT)
dp = Dispatcher()



# --- –§—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É BTC/USDT ---
def get_btc_price():
    print('—â—É–ø–∞–µ–º —Ü–µ–Ω—É')
    try:
        # url = f"{BYBIT_BASE_URL}/v5/execution/list"
        url = f"{BYBIT_BASE_URL}/v5/public/tickers"
        params = {"symbol": "BTCUSDT"}
        response = requests.get(url, params=params)
        data = response.json()
        print(data)

        if data["ret_code"] == 0:
            price = data["result"][0]["last_price"]
            return f"üí∞ –¶–µ–Ω–∞ BTC/USDT: ${price}"
        else:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É."
    except Exception as e:
        print('–Ω–µ –∑–∞—à–ª–∏ –≤ –±–ª–æ–∫')
        return f"–û—à–∏–±–∫–∞: {e}"


# --- –§—É–Ω–∫—Ü–∏—è: –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ ---
def get_recent_trades():
    try:
        url = f"{BYBIT_BASE_URL}/public/realtime"
        params = {"symbol": "BTCUSDT", "resolution": "1", "limit": 5}
        response = requests.get(url, params=params)
        data = response.json()

        if data["ret_code"] == 0:
            trades = data["result"][-5:]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π
            lines = ["üìâ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ (1 –º–∏–Ω):"]
            for trade in trades:
                lines.append(f"–¶–µ–Ω–∞: ${trade['close']}, –û–±—ä—ë–º: {trade['volume']}")
            return "\n".join(lines)
        else:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–¥–µ–ª–∫–∏."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"


# --- –§—É–Ω–∫—Ü–∏—è: –±–∞–ª–∞–Ω—Å (—Ç–æ–ª—å–∫–æ —Å API-–∫–ª—é—á–æ–º) ---
def get_wallet_balance():
    if not BYBIT_API_KEY or not BYBIT_API_SECRET:
        return "üîë API-–∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å –≤ .env."

    try:
        # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É API (–±–∞–ª–∞–Ω—Å)
        url = f"{BYBIT_BASE_URL}/v2/private/wallet/balance"
        params = {
            "api_key": BYBIT_API_KEY,
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å (signature) ‚Äî —É–ø—Ä–æ—â—ë–Ω–Ω–æ
        }
        # ‚ö†Ô∏è –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ (HMAC)
        return "üîí –ü—Ä–∏–º–µ—Ä: —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏ (—Å–º. –Ω–∏–∂–µ)."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞: {e}"


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start ---
@dp.message(Command("start"))
async def cmd_start(message: Message):
    kb = ReplyKeyboardBuilder()
    kb.button(text="–¶–µ–Ω–∞ BTC")
    kb.button(text="–°–¥–µ–ª–∫–∏")
    kb.button(text="–ë–∞–ª–∞–Ω—Å")
    kb.adjust(2)

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è Bybit üìä\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.as_markup(resize_keyboard=True)
    )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ---
@dp.message(F.text == "–¶–µ–Ω–∞ BTC")
async def send_price(message: Message):
    price = get_btc_price()
    await message.answer(price)

@dp.message(F.text == "–°–¥–µ–ª–∫–∏")
async def send_trades(message: Message):
    trades = get_recent_trades()
    await message.answer(trades)

@dp.message(F.text == "–ë–∞–ª–∞–Ω—Å")
async def send_balance(message: Message):
    balance = get_wallet_balance()
    await message.answer(balance)


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    print("Bybit-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())