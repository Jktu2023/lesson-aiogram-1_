
import asyncio
import requests
import random
from aiogram import Bot, Dispatcher
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from io import BytesIO
from aiogram.types import FSInputFile

from dotenv import load_dotenv # load_dotenv ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞.
import os

load_dotenv()
# —Ç–æ–∫–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ .env
TOKEN_BOT = os.getenv('TOKEN_BOT')
if not TOKEN_BOT:
    raise ValueError("TOKEN_BOT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN_BOT)
dp = Dispatcher()



# --- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞–Ω–≥–∏ ---
def get_random_manga_page():
    try:
        # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≥–ª–∞–≤—É
        chapter_response = requests.get(
            "https://api.mangadex.org/chapter",
            params={
                "limit": 1,
                "offset": random.randint(0, 10000),
                "contentRating[]": ["safe", "suggestive", "erotica"],  # –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                "order[createdAt]": "desc"
            }
        )
        chapter_response.raise_for_status()
        chapters = chapter_response.json()["data"]
        if not chapters:
            return None

        chapter = chapters[0]
        chapter_id = chapter["id"]
        manga_title = chapter["attributes"].get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–∞–Ω–≥–∞")

        # –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –≥–ª–∞–≤—ã
        pages_response = requests.get(f"https://api.mangadex.org/at-home/server/{chapter_id}")
        pages_response.raise_for_status()
        server_data = pages_response.json()

        base_url = server_data["baseUrl"]
        hash_value = server_data["chapter"]["hash"]
        page_filenames = server_data["chapter"]["data"]

        if not page_filenames:
            return None

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        random_page = random.choice(page_filenames)
        image_url = f"{base_url}/data/{hash_value}/{random_page}"

        return {
            "image_url": image_url,
            "manga_title": manga_title,
            "chapter_id": chapter_id
        }

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", e)
        return None


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start ---
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç MangaDex. üìö\n–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–ª—É—á–∞–π–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –º–∞–Ω–≥–∏!")

    result = get_random_manga_page()
    if result:
        caption = f"üìñ –ú–∞–Ω–≥–∞: {result['manga_title']}\nüîó –ì–ª–∞–≤–∞: {result['chapter_id']}"
        await message.answer_photo(photo=result["image_url"], caption=caption)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /random ---
@dp.message(Command("random"))
async def cmd_random(message: Message):
    await message.answer("–ò—â—É –µ—â—ë –æ–¥–Ω—É —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")

    result = get_random_manga_page()
    if result:
        caption = f"üìñ –ú–∞–Ω–≥–∞: {result['manga_title']}\nüîó –ì–ª–∞–≤–∞: {result['chapter_id']}"
        await message.answer_photo(photo=result["image_url"], caption=caption)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")





# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())