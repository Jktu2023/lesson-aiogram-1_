
import asyncio
import requests
import random
from aiogram import Bot, Dispatcher
from aiogram.filters import Command, CommandStart
from aiogram.types import Message

from dotenv import load_dotenv # load_dotenv ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞.
import os

load_dotenv()
# —Ç–æ–∫–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ .env
TOKEN_BOT = os.getenv('TOKEN_BOT')
if not TOKEN_BOT:
    raise ValueError("TOKEN_BOT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN_BOT)
dp = Dispatcher()



# URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—à–∫–∏
RANDOM_CAT_URL = "https://api.thecatapi.com/v1/images/search"

# –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
CAPTIONS = [
    "–í–æ—Ç —Ç–µ–±–µ –º–∏–ª–∞—è –∫–æ—à–µ—á–∫–∞! üòª",
    "–î–µ—Ä–∂–∏ –∫–æ—Ç–∏–∫–∞ –Ω–∞ –ø–æ–¥–Ω—è—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! üêæ",
    "–ö—Ç–æ-—Ç–æ –ø—Ä–æ—Å–∏–ª –∫–æ—à–∞—á—å—é –∞–≥—Ä–µ—Å—Å–∏—é? –ù–µ—Ç? –ê –≤–æ—Ç —Ç–µ–±–µ –≤—Å—ë —Ä–∞–≤–Ω–æ! üòº",
    "–°–º–æ—Ç—Ä–∏, –∫—Ç–æ —Ç—É—Ç —É –Ω–∞—Å! –û—á–∞—Ä–æ–≤–∞—à–∫–∞! üê±",
    "–¢—ã –Ω–µ –º–æ–∂–µ—à—å –≥—Ä—É—Å—Ç–∏—Ç—å, –∫–æ–≥–¥–∞ –≤–∏–¥–∏—à—å —ç—Ç–æ! ü•∞"
]

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ===
@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç —Å –∫–æ—à–∫–∞–º–∏. –ù–∞–ø–∏—à–∏ /random_cat, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∏–ª–æ–≥–æ –∫–æ—Ç—ë–Ω–∫–∞!")


@dp.message(Command("random_cat"))
async def random_cat_handler(message: Message):
    # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ TheCatAPI
    try:
        response = requests.get(RANDOM_CAT_URL)
        data = response.json()

        if response.status_code == 200 and data: # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_url = data[0]["url"]

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–¥–ø–∏—Å—å
            caption = random.choice(CAPTIONS)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            await message.answer_photo(photo=image_url, caption=caption) # message, –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                                                                         # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è .answer_photo (–æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–æ—á–∫–æ–π).
                                                                        # photo=image_url –£–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä–∏–º–µ—Ä, https://example.com/cat.jpg
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")

    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: " + str(e))








# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())